/**
* friends: List of friends. 
* bikes: List of bikes. 
* n: Number of friends.
* m: Number of bikes.
*/
function maximize_content_friends(friends, n, bikes, m)
    // Sort friends by greed factor
    Sort(friends, n, by_greed_factor)
    // Sort bikes by performance factor
    Sort(bikes, m, by_performance_factor)
    indexF = 0 // Index for friends list.
    indexB = 0 // Index for bike list. 
    Initialize hash_map
    contentCounter = 0

    // Assign bikes to friends
    While indexF < n and indexB < m:
    
        // Find the first bike that meets or exceeds the friend's greed factor
        While indexB<m and bikes[indexB] < friends[indexF]:
            indexB = indexB + 1

        If indexB<m
            // Assign the bike. Calculate the S value!
            S = bikes[indexB] - friends[indexF]
            If S >= 0
                // The friend is content
                contentCounter = contentCounter + 1
                indexF = indexF + 1
            Else
                // Handle the case where the friend is not content
                Insert into hash_map with key S and value indexB
                indexF = indexF + 1
            End If
            If S is large
                swap a bike with a lower performance till S is close to 0
            end if
            indexB = indexB + 1
        End If
    End While


    // Check for unsatisfied friends and try to reassign bikes
    For i = 0 to HASH_MAP_SIZE - 1
        entry = hash_map[i]
        While entry is not NULL
            If entry.S< 0 // Check the S < 0 case.
                Find a better bike and swap if needed
            End If
            temp = entry
            entry = entry.next
        End While
    End For
End function
